import telebot
import datetime
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import time
import logging
from html.parser import HTMLParser
from sqlalchemy_engine import Session
from workers import get_mailings, get_lectures, add_new_mailing, update_user_id, get_subscribers, get_subscribers_id, check_if_admin, check_if_has_access, add_lectures_from_sheets, check_mailing_status, get_active_mailings
from converters import convert_date, convert_duration
import threading
from main_menu_buttons import menu_inline_admin_keyboard, menu_inline_user_keyboard

API_TOKEN = '5471218632:AAFD0hHTx95SRkycWK88QQurUA96LAahbfU'
bot = telebot.TeleBot(API_TOKEN)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

scheduler = BackgroundScheduler()
scheduler.start()

admin_creating_survey = {}
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º, –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
def send_notifications(message):
    for user in get_subscribers_id():
        print(get_subscribers_id())
        try:
            bot.send_message(user, message, parse_mode='HTML')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user}: {message}")
        except Exception as e:
            logging.error(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ –æ–ø—Ä–æ—Å—ã (–æ–ø—Ä–æ—Å = —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –ø—Ä–æ–π—Ç–∏ –≥—É–≥–ª —Ñ–æ—Ä–º—É)
def schedule_notify_forms():
    logging.info("–ü–ª–∞–Ω–∏—Ä—É—Ç—Å—è –æ–ø—Ä–æ—Å—ã...")
    for entry in get_mailings():
        notify_time = datetime.datetime.strptime(entry['date'], '%d.%m.%Y %H:%M:%S')
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞–¥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 
        if notify_time > datetime.datetime.now():
            scheduler.add_job(send_notifications, 'date', run_date=notify_time, args=[f"{entry['text']}\n–°—Å—ã–ª–∫–∞ –Ω–∞ <a href='{entry['url']}'>–≥—É–≥–ª —Ñ–æ—Ä–º—É</a>"])
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –Ω–∞ {notify_time}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ –ª–µ–∫—Ü–∏–∏
def schedule_notify_lectures():
    logging.info("–ü–ª–∞–Ω–∏—Ä—É—Ç—Å—è –ª–µ–∫—Ü–∏–∏...")
    for lecture in get_lectures():
        status = (lecture['status'])
        if status == '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞':
            lecture_start = datetime.datetime.strptime(lecture['date'], '%d.%m.%Y %H:%M:%S')
            lecture_end = lecture_start + convert_duration(lecture['duration'])
            lecture_start_str = lecture_start.strftime('%d.%m c %H:%M –¥–æ ')
            lecture_end_str = lecture_end.strftime('%H:%M')
            lecture_period = f'{lecture_start_str}{lecture_end_str}'

            # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞–¥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 
            if lecture_start > datetime.datetime.now():
                notification = f"–û –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏!\nüóìÔ∏è <a href='{lecture['calendar_url']}'>{lecture_period}</a> –ø—Ä–æ–π–¥—ë—Ç –ª–µ–∫—Ü–∏—è <b>{lecture['lecture_name']}</b>\n{lecture['lecture_description']}\n\nü•∏ –õ–µ–∫—Ü–∏–æ–Ω–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–≤–µ–¥—ë—Ç {lecture['tg_username']}\nüìç –õ–µ–∫—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è {lecture['location']}, —Å—Å—ã–ª–∫–∞ –Ω–∞ google meet: {lecture['conference_url']}\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –º–∏–Ω–∏-–ª–µ–∫—Ü–∏–∏ <a href='{lecture['lecture_materials_url']}'>–í–û–¢ –¢–£–¢</a>\n{lecture['tags']}"
                notification_times = [
                    lecture_start - datetime.timedelta(days=7),
                    lecture_start - datetime.timedelta(days=3),
                    lecture_start.replace(hour=9, minute=0, second=0, microsecond=0),
                    lecture_start - datetime.timedelta(minutes=5)
                ]
                count_notifications = 0
                for notify_time in notification_times:
                    if notify_time > datetime.datetime.now():
                        scheduler.add_job(send_notifications, 'date', run_date=notify_time, args=[notification])
                        count_notifications+=1
                logging.info(f"–°–æ–∑–¥–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({count_notifications}) –¥–ª—è –ª–µ–∫—Ü–∏–∏ {lecture['lecture_name']}")

# –∫–æ–º–∞–Ω–¥–∞ /—Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    first_name = message.from_user.first_name
    username = f"@{message.from_user.username}"
    if check_if_has_access(user_id,username):
        subscribers_ids = [user['tg_id'] for user in get_subscribers()]
        subscribers_usernames =  [user['tg_username'] for user in get_subscribers()]
        if username in subscribers_usernames:
            if user_id not in subscribers_ids:
                update_user_id(username, user_id)
        markup = menu_inline_user_keyboard()
        if check_if_admin(user_id):
            logging.info(f'{username} - –∞–¥–º–∏–Ω')
            markup = menu_inline_admin_keyboard()
        else: 
            logging.info(f'{username} - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        bot.send_message(message.chat.id, f'<b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n–Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—è—â–∏—Ö—Å—è –ª–µ–∫—Ü–∏—è—Ö –∏ Crosstalks. –ü–æ–º–æ–≥—É –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –∑–∞—Ä–∞–Ω–µ–µ. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–∞–∂–∏–º–∞–π –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!)'.format(message.from_user), reply_markup=markup, parse_mode='html')
    else:
        bot.send_message(message.chat.id, f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        logging.info(f'{username} –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏ –≤ –±–æ—Ç')

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def handle_back_to_menu(message):
    user_id = message.chat.id
    # –ï–°–õ–ò –ê–î–ú–ò–ù
    if check_if_admin(user_id):
        markup = menu_inline_admin_keyboard() # —Å–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã c –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=markup)
    # –ï–°–õ–ò –°–û–¢–†–£–î–ù–ò–ö
    else:
        markup = menu_inline_user_keyboard() # —Å–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã c –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=markup)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda message: True)
def handle_message(callback):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"
    if callback.data == 'create_survey':
        # —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –º–µ–Ω—é—à–∫–∞
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data='createForms')
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button1)
        markup.add(button_back)
        bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"
    if callback.data == 'createForms':
        user_id = callback.from_user.id
        if check_if_admin(user_id):
            if user_id in admin_creating_survey:
                bot.send_message(callback.message.chat.id, '–í—ã —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç–µ –æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.')
                return
            admin_creating_survey[user_id] = True
            poll_data = {}
            def process_title_step(message):
                poll_data['title'] = message.text
                msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ç–æ–º). –ü—Ä–∏–º–µ—Ä:\n–î–æ–±—Ä—ã–π –¥–µ–Ω—å –∫–æ–ª–ª–µ–≥–∏!\n–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏–∏ –≤ –∏—é–Ω–µ!")
                bot.register_next_step_handler(msg, process_message_step)

            def process_message_step(message):
                poll_data['message'] = message.text
                msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª —Ñ–æ—Ä–º—É.")
                bot.register_next_step_handler(msg, process_link_step)

            def process_link_step(message):
                poll_data['link'] = message.text
                msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä:\n20.06.2024 14:00:00")
                bot.register_next_step_handler(msg, process_send_date_step)

            def process_send_date_step(message):
                poll_data['send_date'] = message.text
                msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –æ–ø—Ä–æ—Å–∞. –ü—Ä–∏–º–µ—Ä:\n20.06.2024 14:00:00")
                bot.register_next_step_handler(msg, process_deadline_step)

            def process_deadline_step(message):
                poll_data['deadline'] = message.text
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                summary = (f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {poll_data['message']}\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ñ–æ—Ä–º—É: {poll_data['link']}\n"
                        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {poll_data['send_date']}\n"
                        f"–î–µ–¥–ª–∞–π–Ω –æ–ø—Ä–æ—Å–∞: {poll_data['deadline']}")
                bot.send_message(message.chat.id, summary)

                session = Session()
                type = '–õ–µ–∫—Ü–∏—è'
                text=poll_data['message']
                survey_url=poll_data['link']
                date= datetime.datetime.strptime(poll_data['send_date'], '%d.%m.%Y %H:%M:%S')
                deadline = datetime.datetime.strptime(poll_data['deadline'], '%d.%m.%Y %H:%M:%S')
                print(date, deadline, convert_date(poll_data['send_date']), convert_date(poll_data['deadline']))
                status = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
                admin_name = f'@{message.from_user.username}'
                add_new_mailing(session, type, text, survey_url, date, status, admin_name, deadline)
                # –∑–∞–Ω–æ–≤–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                schedule_notify_forms()

            fake_message = callback.message 
            fake_message.text = ""
            process_title_step(fake_message)
        else:
            bot.send_message(callback.message.chat.id, '–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–Å–ù')
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø—Ä–æ–≤–µ—Å—Ç–∏ –ª–µ–∫—Ü–∏—é
    if callback.data == 'give_lecture':
        if get_active_mailings():
            markup = types.InlineKeyboardMarkup()
            buttonForm = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—É–≥–ª —Ñ–æ—Ä–º—ã', callback_data='give_actual_mailings')
            button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
            markup.add(buttonForm)
            markup.add(button_back)
            bot.send_message(callback.message.chat.id, '–°–µ–π—á–∞—Å –≤—ã–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –Ω–∞–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π/—É—á–∞—Å—Ç–∏–µ –≤ CrossTalks:', reply_markup=markup)
        else: 
            bot.send_message(callback.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–∞–±–æ—Ä–∞ –Ω–∏ –Ω–∞ –ª–µ–∫—Ü–∏–∏, –Ω–∏ –Ω–∞ CrossTalks')

    if callback.data == 'give_actual_mailings':
        message_with_mailings = "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥—É–≥–ª —Ñ–æ—Ä–º—ã:"
        print(get_active_mailings())
        for mailing in get_active_mailings():
            message_with_mailings+=f"\n{mailing['text']}\n{mailing['url']}"
            print(message_with_mailings)
        print(message_with_mailings)
        bot.send_message(callback.message.chat.id, message_with_mailings)
    elif callback.data == 'back':
        
        # –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        #bot.delete_message(callback.message.chat.id, callback.message.message_id)

        handle_back_to_menu(callback.message)


        

# Function to periodically check for changes in the database and update notifications
def update_notifications_periodically():
    while True:
        scheduler.remove_all_jobs()
        schedule_notify_forms()
        schedule_notify_lectures()
        add_lectures_from_sheets("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–∏ (–û—Ç–≤–µ—Ç—ã)")
        check_mailing_status()
        time.sleep(30)

# Start a separate thread to run the periodic checking function
update_thread = threading.Thread(target=update_notifications_periodically)
update_thread.daemon = True  # Set the thread as a daemon so it automatically exits when the main program exits
update_thread.start()

# Bot polling loop (main program)
while True:
    try:
        bot.polling()
    except Exception as e:
        logging.error(f"Polling error: {e}")
        time.sleep(15)  # Sleep to avoid polling failure issues
