import telebot
import datetime
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from apscheduler.schedulers.background import BackgroundScheduler
import time
import logging
import threading
from html.parser import HTMLParser
from buttons_menu import  menu_inline_admin_keyboard, menu_inline_user_keyboard


API_TOKEN = '5471218632:AAFD0hHTx95SRkycWK88QQurUA96LAahbfU'
bot = telebot.TeleBot(API_TOKEN)

# Enable logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

scheduler = BackgroundScheduler()
scheduler.start()

# –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
subscribers = [879863724,]

notifications_data = [
        {'mailing_id': '1', 'type':'–õ–µ–∫—Ü–∏—è', 'date': '20.05.2024 20:51:00', 'text': "–î–æ–±—Ä—ã–π –¥–µ–Ω—å –∫–æ–ª–ª–µ–≥–∏ üåÄ\n–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏–∏ –≤ –∏—é–Ω–µ!\n–ì—É–≥–ª-—Ñ–æ—Ä–º–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫: ", "url":"https://forms.gle/u2K5frepjugeZq8j8"},
        {'mailing_id': '2', 'type':'–õ–µ–∫—Ü–∏—è crosstalk', 'date':'29.05.2024 20:52:00', 'text': "–î–æ–±—Ä—ã–π –¥–µ–Ω—å –∫–æ–ª–ª–µ–≥–∏ üåÄ\n–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏–∏ –≤ <b>–∏—é–Ω–µ</b>!\n–ì—É–≥–ª-—Ñ–æ—Ä–º–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫: ", "url":"https://forms.gle/u2K5frepjugeZq8j8"}
    ]
# Function to handle start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.")
    user_id = message.chat.id
    first_name = message.from_user.first_name
    username = message.from_user.username
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –ª–µ–∫—Ü–∏—é", callback_data='give_lecture')
    button2 = types.InlineKeyboardButton("–ú–æ–∏ –ª–µ–∫—Ü–∏–∏", callback_data='my_lecture')
    button3 = types.InlineKeyboardButton("–î–∞–π–¥–∂–µ—Å—Ç –Ω–∞ –º–µ—Å—è—Ü", callback_data='digest_for_week')
    button4 = types.InlineKeyboardButton("–û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –ª–µ–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü", callback_data='MonthLecRep')
    button5 = types.InlineKeyboardButton("–ü–æ–¥–±–æ—Ä –∑–∞—è–≤–æ–∫ –æ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤", callback_data='SelecofApplic')
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)
    markup.add(button5)
    bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç, {0.first_name}!</b> –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—è—â–∏—Ö—Å—è –ª–µ–∫—Ü–∏—è—Ö –∏ Crosstalks. –ü–æ–º–æ–≥—É –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –∑–∞—Ä–∞–Ω–µ–µ. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–∞–∂–∏–º–∞–π –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!)'.format(message.from_user), reply_markup=markup, parse_mode='html')
    if user_id not in subscribers:
        subscribers.append(user_id)
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: UserID={user_id}, FirstName={first_name}, Username={username}")
        print(subscribers)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏–∑ subscribers
def send_notifications(message):
    for user in subscribers:
        try:
            bot.send_message(user, message, parse_mode='HTML')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user}: {message}")
        except Exception as e:
            logging.error(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user}: {e}")

# Function to schedule specific notifications
def schedule_notify_forms():
    for entry in notifications_data:
        notify_time = datetime.datetime.strptime(entry['date'], '%d.%m.%Y %H:%M:%S')
        if notify_time > datetime.datetime.now():
            scheduler.add_job(send_notifications, 'date', run_date=notify_time, args=[f"{entry['text']}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ñ–æ—Ä–º—É: {entry['url']}"])
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {entry['mailing_id']} for {notify_time}")

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ —Ç–µ–º —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
schedule_notify_forms()

@bot.callback_query_handler(func=lambda message: True)
def handle_message(callback):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–¥–±–æ—Ä –∑–∞—è–≤–æ–∫ –æ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤"
    if callback.data == 'SelecofApplic':
        # —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –º–µ–Ω—é—à–∫–∞
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data='createForms')
        button2 = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞", callback_data='resultsForms')
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button1)
        markup.add(button2)
        markup.add(button_back)
        bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ–∑–¥–∞—Ç—å –æ—Ç–ø—Ä–æ—Å"
    if callback.data == 'createForms':
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        STATE_TITLE, STATE_MESSAGE, STATE_LINK, STATE_SEND_DATE, STATE_DEADLINE = range(5)
        poll_data = {}

        def process_title_step(message):
            poll_data['title'] = message.text
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å –∫–æ–ª–ª–µ–≥–∏! –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏–∏ –≤ –∏—é–Ω–µ!")
            bot.register_next_step_handler(msg, process_message_step)

        def process_message_step(message):
            poll_data['message'] = message.text
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª —Ñ–æ—Ä–º—É.")
            bot.register_next_step_handler(msg, process_link_step)

        def process_link_step(message):
            poll_data['link'] = message.text
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä:\n20.06.2024 14:00:00")
            bot.register_next_step_handler(msg, process_send_date_step)

        def process_send_date_step(message):
            poll_data['send_date'] = message.text
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –æ–ø—Ä–æ—Å–∞. –ü—Ä–∏–º–µ—Ä:\n20.06.2024 14:00:00")
            bot.register_next_step_handler(msg, process_deadline_step)

        def process_deadline_step(message):
            poll_data['deadline'] = message.text
            # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
            bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            summary = (f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: {poll_data['title']}\n"
                        f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {poll_data['message']}\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ñ–æ—Ä–º—É: {poll_data['link']}\n"
                        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {poll_data['send_date']}\n"
                        f"–î–µ–¥–ª–∞–π–Ω –æ–ø—Ä–æ—Å–∞: {poll_data['deadline']}")
            notifications_data.append({'mailing_id': '3', 'type':'–õ–µ–∫—Ü–∏—è','date': f"{poll_data['send_date']}", 'text': f"{poll_data['message']}", "url":f"{poll_data['link']}"})
            bot.send_message(message.chat.id, summary)
            print(notifications_data)
            schedule_notify_forms()

        msg = bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
        bot.register_next_step_handler(msg, process_title_step)

# Start polling
while True:
    try:
        bot.polling()
    except Exception as e:
        logging.error(f"Polling error: {e}")
        time.sleep(15)  # Sleep to avoid polling failure issues